# This is a basic workflow to help you get started with Actions

name: CI
env:
  # Setting an environment variable with the value of a configuration variable
  env_var: ${{ vars.VAR_1 }}
  
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
           # Runs a set of commands using the runners shell
      - name: Write variables
        run: |
            echo "VAR_1 from shell environment : ${{env.vars.VAR_1 }}"
            echo "SEC_1 from shell environment : ${{env.secrets.SEC_1 }}"
            echo "ENV from shell environment : ${{env}}"
            echo "variable from shell environment : $env_var"
  powerShellIssues:
      # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
    - name: Install prerequisites
      shell: pwsh
      run: |
        Install-Module AadAuthenticationFactory -AllowPrerelease -Force -Scope CurrentUser
    
    - name: Write files names
      shell: pwsh
      run: |
        $files = Get-ChildItem "$env:GITHUB_WORKSPACE\Module" -File -Recurse -Include *.ps1, *.ps1xml, *.psd1, *.psm1, *.pssc, *.psrc, *.cdxml
        try {
            foreach ($file in $files) {
              $file
            }
        }
        catch {
            Write-Host "Error: $($_.Exception)"
            throw
        }
        Write-Host "Signed files summary"
        Write-Host "VAR_1:"
        ${{ vars.VAR_1}}
